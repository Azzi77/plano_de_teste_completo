{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 4,
    "pending": 0,
    "failures": 1,
    "start": "2022-09-13T20:51:28.028Z",
    "end": "2022-09-13T20:51:30.449Z",
    "duration": 2421,
    "testsRegistered": 5,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c8403729-b6b1-44b8-808b-a7ccb2bcef66",
      "title": "",
      "fullFile": "cypress/integration/1.usuarios.spec.js",
      "file": "cypress/integration/1.usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
          "title": "Casos de teste sobre a rota /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os usuários cadastrados na Serverest",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar todos os usuários cadastrados na Serverest",
              "timedOut": null,
              "duration": 724,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarios().then(res => {\n  cy.contractValidation(res, 'get-usuarios', 200);\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "fd32411e-da4d-4cfa-927d-87c6ba4704e8",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve postar um novo usuários administrador existente",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Não deve postar um novo usuários administrador existente",
              "timedOut": null,
              "duration": 245,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.postarUsuarioSemSucesso().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 400);\n  expect(res.body.message).to.be.eq('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "6053c2b9-2437-421c-beb9-727a096aa140",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar o usuário de um arquivo json",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar o usuário de um arquivo json",
              "timedOut": null,
              "duration": 705,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture('usuario.json').then(json => {\n  let usuario = {\n    email: json.email,\n    password: json.password\n  };\n  _serverest.default.logar(usuario).then(res => {\n    _validaServerest.default.validarLoginComSucesso(res);\n    _serverest.default.salvarBearer(res);\n  });\n});",
              "err": {
                "message": "AssertionError: expected { Object (message) } to have own property 'authorization'",
                "estack": "AssertionError: expected { Object (message) } to have own property 'authorization'\n    at Function.validarLoginComSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\1.usuarios.spec.js:389:30)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\1.usuarios.spec.js:197:34)",
                "diff": null
              },
              "uuid": "4c98f5ed-ca0e-4b57-aad5-94fec317056c",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar e salva um usuário em um arquivo json",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar e salva um usuário em um arquivo json",
              "timedOut": null,
              "duration": 311,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let inteiro = _factory.default.gerarInteiroAleatorio();\n_serverest.default.buscarUsuarios().then(res => {\n  cy.writeFile('./cypress/fixtures/usuario.json', res.body.usuarios[inteiro]);\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "549e2cb0-66bd-43f3-9133-8857363f4eaa",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 265,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuarioComSucesso().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 201);\n  expect(res.body.message).to.be.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "39402964-8964-4c8b-8dea-89f50f79c168",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd32411e-da4d-4cfa-927d-87c6ba4704e8",
            "6053c2b9-2437-421c-beb9-727a096aa140",
            "549e2cb0-66bd-43f3-9133-8857363f4eaa",
            "39402964-8964-4c8b-8dea-89f50f79c168"
          ],
          "failures": [
            "4c98f5ed-ca0e-4b57-aad5-94fec317056c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2250,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}