{
  "stats": {
    "suites": 4,
    "tests": 19,
    "passes": 17,
    "pending": 0,
    "failures": 2,
    "start": "2022-09-27T19:28:09.724Z",
    "end": "2022-09-27T19:28:41.127Z",
    "duration": 11667,
    "testsRegistered": 19,
    "passPercent": 89.47368421052632,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7982a6e8-a77a-4fba-a46b-3e5f1a306566",
      "title": "",
      "fullFile": "cypress/integration/2.usuarios.spec.js",
      "file": "cypress/integration/2.usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "063df122-a639-4fa6-9481-cc6dca3c8586",
          "title": "Casos de teste sobre a rota /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os usuários cadastrados na Serverest",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar todos os usuários cadastrados na Serverest",
              "timedOut": null,
              "duration": 533,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarios().then(res => {\n  cy.contractValidation(res, 'get-usuarios', 200);\n  _validaServerest.default.validarBuscaDeUsuarios(res); //ok\n});",
              "err": {},
              "uuid": "6071be8e-ada7-4f9c-be54-29d12957a3de",
              "parentUUID": "063df122-a639-4fa6-9481-cc6dca3c8586",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 279,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarUsuarioComSucesso().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 201);\n  expect(res.body.message).to.be.equal('Cadastro realizado com sucesso');\n  Cypress.env('idUsuarioCadastrado', res.body._id); //ok\n});",
              "err": {},
              "uuid": "f0d45258-8783-412b-80d3-6f5b1a158fe8",
              "parentUUID": "063df122-a639-4fa6-9481-cc6dca3c8586",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar um usuário por _id com sucesso",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar um usuário por _id com sucesso",
              "timedOut": null,
              "duration": 247,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioPorId().then(res => {\n  cy.contractValidation(res, 'get-usuarios-by-id', 200);\n  _validaServerest.default.validarBuscaDeUsuarioPorId(res);\n});",
              "err": {},
              "uuid": "24d15e62-c1bb-4df6-b6de-4ebca273d96b",
              "parentUUID": "063df122-a639-4fa6-9481-cc6dca3c8586",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário com sucesso",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve editar um usuário com sucesso",
              "timedOut": null,
              "duration": 272,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.editarUsuarioComSucesso().then(res => {\n  cy.contractValidation(res, 'put-usuario-by-id', 200);\n  expect(res.body.message).to.be.eq('Registro alterado com sucesso');\n});",
              "err": {},
              "uuid": "f4e8d772-ebfe-446a-997a-a189382980a5",
              "parentUUID": "063df122-a639-4fa6-9481-cc6dca3c8586",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve cadastrar um novo usuários, com e-mail já utilizado em outro cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Não deve cadastrar um novo usuários, com e-mail já utilizado em outro cadastrado",
              "timedOut": null,
              "duration": 299,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuarioSemSucesso().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 400);\n  expect(res.body.message).to.be.eq('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "42b50ea0-9458-43ec-99b3-0c1b8c646925",
              "parentUUID": "063df122-a639-4fa6-9481-cc6dca3c8586",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve editar um novo usuário, com e-mail já utilizado em outro cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Não deve editar um novo usuário, com e-mail já utilizado em outro cadastrado",
              "timedOut": null,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// falta desevolver código",
              "err": {},
              "uuid": "ff19236e-eebe-4767-8f00-b301c0085bdf",
              "parentUUID": "063df122-a639-4fa6-9481-cc6dca3c8586",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6071be8e-ada7-4f9c-be54-29d12957a3de",
            "f0d45258-8783-412b-80d3-6f5b1a158fe8",
            "24d15e62-c1bb-4df6-b6de-4ebca273d96b",
            "f4e8d772-ebfe-446a-997a-a189382980a5",
            "42b50ea0-9458-43ec-99b3-0c1b8c646925",
            "ff19236e-eebe-4767-8f00-b301c0085bdf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1657,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "17aea881-5df6-45e9-bcd5-ca77c23afeae",
      "title": "",
      "fullFile": "cypress/integration/3.produtos.spec.js",
      "file": "cypress/integration/3.produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "37a217fe-faa1-465c-b436-a00354c3042a",
          "title": "Casos de teste sobre a rota /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os produtos cadastrados",
              "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve buscar todos os produtos cadastrados",
              "timedOut": null,
              "duration": 373,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarProdutos().then(res => {\n  _validaServerest.default.validarBuscaDeProdutos(res);\n});",
              "err": {},
              "uuid": "b30c9690-2548-497e-84cd-64ddd911cde7",
              "parentUUID": "37a217fe-faa1-465c-b436-a00354c3042a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9d490070-2501-4e39-a023-1c5644551f70",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar um novo produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve cadastrar um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 918,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastrarProdutoComSucesso().then(res => {\n  cy.contractValidation(res, 'post-produtos', 201);\n  _validaServerest.default.validarCadastroDeProdutosComSucesso(res);\n});",
                  "err": {},
                  "uuid": "81a6a2a3-7795-4236-92af-659724187ac1",
                  "parentUUID": "9d490070-2501-4e39-a023-1c5644551f70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um produto pelo id com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve buscar um produto pelo id com sucesso",
                  "timedOut": null,
                  "duration": 757,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutosPorId().then(res => {\n  cy.contractValidation(res, 'get-produtos-by-id', 200);\n  _validaServerest.default.validarBuscaDeProdutosPorId(res);\n});",
                  "err": {},
                  "uuid": "d3c921da-c8d8-4f9f-a352-14c1554b74ed",
                  "parentUUID": "9d490070-2501-4e39-a023-1c5644551f70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar um produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve editar um produto com sucesso",
                  "timedOut": null,
                  "duration": 775,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.editarProdutosPorId().then(res => {\n  cy.contractValidation(res, 'put-produtos-by-id', 200);\n  expect(res.body.message).to.be.equal('Registro alterado com sucesso');\n});",
                  "err": {},
                  "uuid": "ae0536a6-6caa-4031-b208-10f3850b8851",
                  "parentUUID": "9d490070-2501-4e39-a023-1c5644551f70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve tentar cadastrar um produto com nome existente,sem sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve tentar cadastrar um produto com nome existente,sem sucesso",
                  "timedOut": null,
                  "duration": 760,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastrarProdutoComNomeExistente().then(res => {\n  cy.contractValidation(res, 'post-produtos', 400);\n  expect(res.body.message).to.be.equal('Já existe produto com esse nome');\n});",
                  "err": {},
                  "uuid": "db49b1fe-f715-4502-9def-157010d29540",
                  "parentUUID": "9d490070-2501-4e39-a023-1c5644551f70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve tentar cadastrar um produto com valor negativo, sem sucesso,",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve tentar cadastrar um produto com valor negativo, sem sucesso,",
                  "timedOut": null,
                  "duration": 1212,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//não esta mapeado\n_serverest.default.cadastrarProdutoSemSucesso().then(res => {\n  //retorna 401 undefined\n  _validaServerest.default.validarCadastroDeProdutosSemSucesso(res); //as vezes retorna 403 entao da erro \n  //na validação da mensagem\n});",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'preco deve ser um número positivo'",
                    "estack": "AssertionError: expected undefined to equal 'preco deve ser um número positivo'\n    at Function.validarCadastroDeProdutosSemSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\3.produtos.spec.js:525:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\3.produtos.spec.js:223:34)",
                    "diff": null
                  },
                  "uuid": "0132e166-1903-4cda-a51d-8baef2a24788",
                  "parentUUID": "9d490070-2501-4e39-a023-1c5644551f70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar um produto sem sucesso, rota exclusiva para adiministrador true",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve editar um produto sem sucesso, rota exclusiva para adiministrador true",
                  "timedOut": null,
                  "duration": 519,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// desevolver codigo",
                  "err": {},
                  "uuid": "8428f5c7-21a9-4198-a79a-f5db4a91fe77",
                  "parentUUID": "9d490070-2501-4e39-a023-1c5644551f70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81a6a2a3-7795-4236-92af-659724187ac1",
                "d3c921da-c8d8-4f9f-a352-14c1554b74ed",
                "ae0536a6-6caa-4031-b208-10f3850b8851",
                "db49b1fe-f715-4502-9def-157010d29540",
                "8428f5c7-21a9-4198-a79a-f5db4a91fe77"
              ],
              "failures": [
                "0132e166-1903-4cda-a51d-8baef2a24788"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4941,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "b30c9690-2548-497e-84cd-64ddd911cde7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 373,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7a8f7ec6-739e-48e8-9245-f465f279c98c",
      "title": "",
      "fullFile": "cypress/integration/4.carrinhos.spec.js",
      "file": "cypress/integration/4.carrinhos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0bfba74f-e80d-44f7-9815-773bea0b9016",
          "title": "Casos de teste sobre a rota /carrinhos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve listar todos os carrinhos cadastrados",
              "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Deve listar todos os carrinhos cadastrados",
              "timedOut": null,
              "duration": 299,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarCarrinhos().then(res => {\n  cy.contractValidation(res, 'get-carrinhos', 200);\n  _validaServerest.default.validarBuscaDeCarrinhos(res);\n});",
              "err": {},
              "uuid": "773aeb26-5a87-4d98-823d-7719ccc463ea",
              "parentUUID": "0bfba74f-e80d-44f7-9815-773bea0b9016",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "773aeb26-5a87-4d98-823d-7719ccc463ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 299,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "251c48f1-c743-4858-b90d-bf57c9819a89",
          "title": "Logar com sucesso",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve cadastrar um carrinho com sucesso ",
              "fullTitle": "Logar com sucesso Deve cadastrar um carrinho com sucesso ",
              "timedOut": null,
              "duration": 720,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarCarrinhoComSucesso().then(res => {\n  cy.contractValidation(res, 'post-carrinhos', 201);\n  expect(res.body.message).to.be.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "ee9c7acd-6a82-4b39-b0b8-41cb8f1dcf31",
              "parentUUID": "251c48f1-c743-4858-b90d-bf57c9819a89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir um carrinho com sucesso e concluir compra ",
              "fullTitle": "Logar com sucesso Deve excluir um carrinho com sucesso e concluir compra ",
              "timedOut": null,
              "duration": 723,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Codigo desenvolvido com a ajuda do João/Vinicius\n_serverest.default.concluirCompra().then(res => {\n  cy.contractValidation(res, 'delete-carrinhos-concluir-compra', 200);\n  expect(res.body.message).to.be.equal('Registro excluído com sucesso'); //validação da mensagem coloquei direto aqui\n});",
              "err": {},
              "uuid": "492e922c-2239-47ed-9ea0-81fa50be6312",
              "parentUUID": "251c48f1-c743-4858-b90d-bf57c9819a89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve tentar cadastrar um carrinho com produto duplicado, sem sucesso ",
              "fullTitle": "Logar com sucesso Deve tentar cadastrar um carrinho com produto duplicado, sem sucesso ",
              "timedOut": null,
              "duration": 731,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarCarrinhoComProdutoDuplicado().then(res => {\n  cy.contractValidation(res, 'post-carrinhos', 400);\n  expect(res.body.message).to.be.equal('Não é permitido possuir produto duplicado');\n});",
              "err": {},
              "uuid": "16381455-f590-4fea-bbe0-4ad117b4d31e",
              "parentUUID": "251c48f1-c743-4858-b90d-bf57c9819a89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee9c7acd-6a82-4b39-b0b8-41cb8f1dcf31",
            "492e922c-2239-47ed-9ea0-81fa50be6312",
            "16381455-f590-4fea-bbe0-4ad117b4d31e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2174,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d4eb206d-c800-48c8-bec2-aacc6a81eddc",
      "title": "",
      "fullFile": "cypress/integration/1.login.spec.js",
      "file": "cypress/integration/1.login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cdf14d21-2d13-4150-820b-d3bcfcc4bae5",
          "title": "Casos de teste sobre a rota /login da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar login com sucesso",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Deve realizar login com sucesso",
              "timedOut": null,
              "duration": 1314,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioParaLogin();\ncy.get('@usuarioLogin').then(usuario => {\n  _serverest.default.logar(usuario).then(res => {\n    _validaServerest.default.validarLoginComSucesso(res);\n    cy.contractValidation(res, 'post-login', 200);\n    _serverest.default.salvarBearer(res);\n  });\n});",
              "err": {},
              "uuid": "95f8b182-68a0-40c0-b051-566038f09eb5",
              "parentUUID": "cdf14d21-2d13-4150-820b-d3bcfcc4bae5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar login com email invalido ",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Não deve realizar login com email invalido ",
              "timedOut": null,
              "duration": 909,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.logarEmailInvalido().then(res => {\n  cy.contractValidation(res, 'post-login', 400); // aqui tem bug na documentação esta 400, porem retorna um 401\n  _validaServerest.default.validarLoginComEmailsInvalido(res);\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Function.validarLoginComEmailsInvalido (https://serverest.dev/__cypress/tests?p=cypress\\integration\\1.login.spec.js:466:32)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\1.login.spec.js:193:32)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "afc2c9a7-6f10-42f4-8593-6458cbe88c5d",
              "parentUUID": "cdf14d21-2d13-4150-820b-d3bcfcc4bae5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95f8b182-68a0-40c0-b051-566038f09eb5"
          ],
          "failures": [
            "afc2c9a7-6f10-42f4-8593-6458cbe88c5d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2223,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}