{
  "stats": {
    "suites": 5,
    "tests": 15,
    "passes": 13,
    "pending": 0,
    "failures": 2,
    "start": "2022-09-13T20:51:28.028Z",
    "end": "2022-09-13T20:52:18.366Z",
    "duration": 8553,
    "testsRegistered": 15,
    "passPercent": 86.66666666666667,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "36c1dfbb-d82a-43fe-bcd6-83c18728957e",
      "title": "",
      "fullFile": "cypress/integration/2.login.spec.js",
      "file": "cypress/integration/2.login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "245d44c0-86b0-4d3c-80ec-f6871aa8f49b",
          "title": "Casos de teste sobre a rota /login da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar login com sucesso",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Deve realizar login com sucesso",
              "timedOut": null,
              "duration": 616,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// codigo realizado na call e mentoria\n_serverest.default.buscarUsuarioParaLogin();\ncy.get('@usuarioLogin').then(usuario => {\n  _serverest.default.logar(usuario).then(res => {\n    _validaServerest.default.validarLoginComSucesso(res);\n    cy.contractValidation(res, 'post-login', 200);\n    _serverest.default.salvarBearer(res);\n  });\n});",
              "err": {},
              "uuid": "2c13c279-b570-4b69-89f1-3e8f151d72e1",
              "parentUUID": "245d44c0-86b0-4d3c-80ec-f6871aa8f49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar login com email invalido ",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Não deve realizar login com email invalido ",
              "timedOut": null,
              "duration": 232,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//eu\ncy.logarEmailInvalido().then(res => {\n  cy.contractValidation(res, 'post-login', 400); // aqui tem bug na documentação esta 400, porem retorna um 401\n  _validaServerest.default.validarLoginComEmailsInvalido(res);\n});",
              "err": {},
              "uuid": "e5af5ceb-a808-4816-bb9e-fa811beaee7e",
              "parentUUID": "245d44c0-86b0-4d3c-80ec-f6871aa8f49b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c13c279-b570-4b69-89f1-3e8f151d72e1",
            "e5af5ceb-a808-4816-bb9e-fa811beaee7e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 848,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9b32a01f-406f-4817-b502-bd1fd3b3584f",
      "title": "",
      "fullFile": "cypress/integration/3.produtos.spec.js",
      "file": "cypress/integration/3.produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "693a1c5c-ec5a-4a78-b6d5-e40c89f02d5c",
          "title": "Casos de teste sobre a rota /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os produtos cadastrados",
              "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve buscar todos os produtos cadastrados",
              "timedOut": null,
              "duration": 336,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarProdutos().then(res => {\n  _validaServerest.default.validarBuscaDeProdutos(res);\n});",
              "err": {},
              "uuid": "cf7f5cb8-c828-446c-90c6-c19e6eb25227",
              "parentUUID": "693a1c5c-ec5a-4a78-b6d5-e40c89f02d5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6e74f2fb-ea9f-4568-9597-bfca1bd06aa0",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve postar um novo produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve postar um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 758,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastrarProdutoComSucesso().then(res => {\n  cy.contractValidation(res, 'post-produtos', 201);\n  _validaServerest.default.validarCadastroDeProdutosComSucesso(res);\n});",
                  "err": {},
                  "uuid": "345331e8-d7ef-4ed6-aa3a-5f1323172b62",
                  "parentUUID": "6e74f2fb-ea9f-4568-9597-bfca1bd06aa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve deletar um produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve deletar um produto com sucesso",
                  "timedOut": null,
                  "duration": 684,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.deletarProdutoCadastrado().then(res => {\n  cy.contractValidation(res, 'delete-produtos-by-id', 200); //ValidaServerest.validarCadastroDeProdutosComSucesso(res)\n  expect(res.body.message).to.be.equal('Registro excluído com sucesso');\n});",
                  "err": {},
                  "uuid": "0e29b60f-446d-4c3a-8430-ace91dc6dc1c",
                  "parentUUID": "6e74f2fb-ea9f-4568-9597-bfca1bd06aa0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "345331e8-d7ef-4ed6-aa3a-5f1323172b62",
                "0e29b60f-446d-4c3a-8430-ace91dc6dc1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1442,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "cf7f5cb8-c828-446c-90c6-c19e6eb25227"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 336,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1fffa2d3-b0a5-4b6e-ba90-7e962a1c941e",
      "title": "",
      "fullFile": "cypress/integration/4.carrinhos.spec.js",
      "file": "cypress/integration/4.carrinhos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5a8fe67d-7878-4bab-889d-100ef707a279",
          "title": "Casos de teste sobre a rota /carrinhos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve listar todos os carrinhos cadastrados",
              "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Deve listar todos os carrinhos cadastrados",
              "timedOut": null,
              "duration": 365,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarCarrinhos().then(res => {\n  cy.contractValidation(res, 'get-carrinhos', 200);\n  _validaServerest.default.validarBuscaDeCarrinhos(res);\n});",
              "err": {},
              "uuid": "1b9eb6ac-47e6-4584-b1bd-c7700042ac57",
              "parentUUID": "5a8fe67d-7878-4bab-889d-100ef707a279",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b9eb6ac-47e6-4584-b1bd-c7700042ac57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 365,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9e1064d2-e447-45d6-b98b-9149895c2daa",
          "title": "Logar com sucesso",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve cadastrar um carrinho com sucesso ",
              "fullTitle": "Logar com sucesso Deve cadastrar um carrinho com sucesso ",
              "timedOut": null,
              "duration": 718,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarCarrinhoComSucesso().then(res => {\n  cy.contractValidation(res, 'post-carrinhos', 201);\n  expect(res.body.message).to.be.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "d4192106-3019-40b0-b951-5734b0f1d7fa",
              "parentUUID": "9e1064d2-e447-45d6-b98b-9149895c2daa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir um carrinho com sucesso e concluir compra ",
              "fullTitle": "Logar com sucesso Deve excluir um carrinho com sucesso e concluir compra ",
              "timedOut": null,
              "duration": 691,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Codigo desenvolvido com a ajuda do João/Vinicius\n_serverest.default.concluirCompra().then(res => {\n  cy.contractValidation(res, 'delete-carrinhos-concluir-compra', 200);\n  expect(res.body.message).to.be.equal('Registro excluído com sucesso'); //validação da mensagem coloquei direto aqui\n});",
              "err": {},
              "uuid": "a2deb4ba-bedd-47a3-8a69-389ca8e754a4",
              "parentUUID": "9e1064d2-e447-45d6-b98b-9149895c2daa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir um carrinho com sucesso e retornar produto para estoque ",
              "fullTitle": "Logar com sucesso Deve excluir um carrinho com sucesso e retornar produto para estoque ",
              "timedOut": null,
              "duration": 655,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Codigo desenvolvido com a ajuda do João/Vinicius\n_serverest.default.cancelarCompra().then(res => {\n  cy.contractValidation(res, 'delete-carrinhos-cancelar-compra', 200);\n  expect(res.body.message).to.be.equal('Não foi encontrado carrinho para esse usuário');\n});",
              "err": {},
              "uuid": "e51f9ce2-4fb9-4329-b6b3-19f2c967126f",
              "parentUUID": "9e1064d2-e447-45d6-b98b-9149895c2daa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4192106-3019-40b0-b951-5734b0f1d7fa",
            "a2deb4ba-bedd-47a3-8a69-389ca8e754a4",
            "e51f9ce2-4fb9-4329-b6b3-19f2c967126f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2064,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "96139943-d2bc-4d7b-a845-4a5f9da70264",
      "title": "",
      "fullFile": "cypress/integration/5.nao-mapeado.js",
      "file": "cypress/integration/5.nao-mapeado.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8880f35d-8adb-4b6d-bff3-0c729517551a",
          "title": "Casos de teste não mapeado na documentação da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7fe41a9c-74a6-412e-b517-21834d72fa70",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve tentar cadastrar um produto com valor negativo, sem sucesso,",
                  "fullTitle": "Casos de teste não mapeado na documentação da API Serverest Logar com sucesso Deve tentar cadastrar um produto com valor negativo, sem sucesso,",
                  "timedOut": null,
                  "duration": 1248,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//não esta mapeado\n_serverest.default.cadastrarProdutoSemSucesso().then(res => {\n  //retorna 401 undefined\n  _validaServerest.default.validarCadastroDeProdutosSemSucesso(res); //as vezes retorna 403 entao da erro \n  //na validação da mensagem\n});",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'preco deve ser um número positivo'",
                    "estack": "AssertionError: expected undefined to equal 'preco deve ser um número positivo'\n    at Function.validarCadastroDeProdutosSemSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\5.nao-mapeado.js:391:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\5.nao-mapeado.js:195:34)",
                    "diff": null
                  },
                  "uuid": "7a8c5161-9e56-4823-b2cf-4502fc6c59e1",
                  "parentUUID": "7fe41a9c-74a6-412e-b517-21834d72fa70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7a8c5161-9e56-4823-b2cf-4502fc6c59e1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1248,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c8403729-b6b1-44b8-808b-a7ccb2bcef66",
      "title": "",
      "fullFile": "cypress/integration/1.usuarios.spec.js",
      "file": "cypress/integration/1.usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
          "title": "Casos de teste sobre a rota /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os usuários cadastrados na Serverest",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar todos os usuários cadastrados na Serverest",
              "timedOut": null,
              "duration": 724,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarios().then(res => {\n  cy.contractValidation(res, 'get-usuarios', 200);\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "fd32411e-da4d-4cfa-927d-87c6ba4704e8",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve postar um novo usuários administrador existente",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Não deve postar um novo usuários administrador existente",
              "timedOut": null,
              "duration": 245,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.postarUsuarioSemSucesso().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 400);\n  expect(res.body.message).to.be.eq('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "6053c2b9-2437-421c-beb9-727a096aa140",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar o usuário de um arquivo json",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar o usuário de um arquivo json",
              "timedOut": null,
              "duration": 705,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture('usuario.json').then(json => {\n  let usuario = {\n    email: json.email,\n    password: json.password\n  };\n  _serverest.default.logar(usuario).then(res => {\n    _validaServerest.default.validarLoginComSucesso(res);\n    _serverest.default.salvarBearer(res);\n  });\n});",
              "err": {
                "message": "AssertionError: expected { Object (message) } to have own property 'authorization'",
                "estack": "AssertionError: expected { Object (message) } to have own property 'authorization'\n    at Function.validarLoginComSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\1.usuarios.spec.js:389:30)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\1.usuarios.spec.js:197:34)",
                "diff": null
              },
              "uuid": "4c98f5ed-ca0e-4b57-aad5-94fec317056c",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar e salva um usuário em um arquivo json",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar e salva um usuário em um arquivo json",
              "timedOut": null,
              "duration": 311,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let inteiro = _factory.default.gerarInteiroAleatorio();\n_serverest.default.buscarUsuarios().then(res => {\n  cy.writeFile('./cypress/fixtures/usuario.json', res.body.usuarios[inteiro]);\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "549e2cb0-66bd-43f3-9133-8857363f4eaa",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 265,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuarioComSucesso().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 201);\n  expect(res.body.message).to.be.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "39402964-8964-4c8b-8dea-89f50f79c168",
              "parentUUID": "243c8bdc-3f3d-4ba2-baf0-24ec09e61dd6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd32411e-da4d-4cfa-927d-87c6ba4704e8",
            "6053c2b9-2437-421c-beb9-727a096aa140",
            "549e2cb0-66bd-43f3-9133-8857363f4eaa",
            "39402964-8964-4c8b-8dea-89f50f79c168"
          ],
          "failures": [
            "4c98f5ed-ca0e-4b57-aad5-94fec317056c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2250,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}